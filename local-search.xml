<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPP004:控制流</title>
    <link href="/2023/01/19/CPP004-%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <url>/2023/01/19/CPP004-%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-Continue语句"><a href="#4-1-Continue语句" class="headerlink" title="4.1 Continue语句"></a>4.1 Continue语句</h2><p>continue语句跳过循环的一次执行。代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)<br>&#123;<br>     <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">//若i为偶数则continue</span><br>         <span class="hljs-keyword">continue</span>;<br>     <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Hello,continue!&quot;</span>);<br>     std::cout &lt;&lt; i &lt;&lt; std::endl;     <br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码当i为偶数时执行分支语句，跳过循环，输出结果为</p><p><img src="/img/blog_img/CPP004/1.png" alt="输出结果"></p><h2 id="4-2-Break语句"><a href="#4-2-Break语句" class="headerlink" title="4.2 Break语句"></a>4.2 Break语句</h2><p>break语句直接结束循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)<br>&#123;<br>     <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">2</span>)<br>         <span class="hljs-keyword">break</span>;<br>     <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Hello,break!&quot;</span>);<br>     std::cout &lt;&lt; i &lt;&lt; std::endl;     <br>&#125;<br></code></pre></td></tr></table></figure><p>当i&#x3D;3时满足条件直接结束循环，输出结果为:</p><p><img src="/img/blog_img/CPP004/2.png" alt="输出结果"></p><h2 id="4-3-Return语句"><a href="#4-3-Return语句" class="headerlink" title="4.3 Return语句"></a>4.3 Return语句</h2><p>return语句直接退出函数，并需要一个合法的类型作为返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello,World!&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此时程序会直接退出main函数，也即直接退出程序。其后的输出语句并不会被执行</p>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP003:循环</title>
    <link href="/2023/01/19/CPP003-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2023/01/19/CPP003-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1-For循环"><a href="#3-1-For循环" class="headerlink" title="3.1 For循环"></a>3.1 For循环</h2><p>for循环最基础的用法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++)<br>        <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-2-While循环"><a href="#3-2-While循环" class="headerlink" title="3.2 While循环"></a>3.2 While循环</h2><p>基础用法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">5</span>)<br>&#123;<br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Hello,While!&quot;</span>);<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-do-while循环"><a href="#3-3-do-while循环" class="headerlink" title="3.3 do-while循环"></a>3.3 do-while循环</h2><p>do-while循环基本与while循环相同，但do-while循环中do语句块的代码至少会被使用一次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> <span class="hljs-comment">//execute at least once.</span><br>&#123;<br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;do while isn&#x27;t useless!&quot;</span>);<br>    i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP002:条件判断与分支</title>
    <link href="/2023/01/19/CPP002-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%88%86%E6%94%AF/"/>
    <url>/2023/01/19/CPP002-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%8E%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-条件判断"><a href="#2-1-条件判断" class="headerlink" title="2.1 条件判断"></a>2.1 条件判断</h2><p>条件判断最经常使用的就是if语句，通过if语句，计算机会判断条件是否为真，若为真，就跳转到内存固定的位置执行该位置处的语句，经常在内存中跳转有可能造成代码执行速度下降。</p><p>使用示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num = <span class="hljs-number">5</span>;<br><span class="hljs-type">bool</span> comparison = (num == <span class="hljs-number">5</span>); <span class="hljs-comment">//bool type stores the comparison result</span><br><span class="hljs-keyword">if</span>(comparison)<br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Equal 5!&quot;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Not equal...&quot;</span>);<br></code></pre></td></tr></table></figure><p>bool类型是一种特殊的整数类型，若为0，则为假，反之则为真</p><p>也可用来判断指针是否为Null</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* ptr = <span class="hljs-string">&quot;It&#x27;s not a null&quot;</span>;<br><span class="hljs-keyword">if</span> (ptr) <span class="hljs-comment">//if ptr is null,the next statement won&#x27;t be performed</span><br>    <span class="hljs-built_in">Log</span>(ptr);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">Log</span>(<span class="hljs-string">&quot;Null!&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP000:环境的安装</title>
    <link href="/2023/01/19/CPP000-%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2023/01/19/CPP000-%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="0-1-编译器的下载"><a href="#0-1-编译器的下载" class="headerlink" title="0.1 编译器的下载"></a>0.1 编译器的下载</h2><p>笔者使用的是MinGW-w64，这是一款开源的编译器，在sourceforge上可以下载</p><p>网址：<a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW-w64 - for 32 and 64 bit Windows - Browse &#x2F;mingw-w64&#x2F;mingw-w64-release at SourceForge.net</a></p><p>选择合适自己机器的版本下载，笔者的电脑是64位的，故选择的版本为</p><p><img src="/img/blog_img/CPP000/1.png" alt="img"></p><p>中间的win32表示目标平台是windows，若是Linux和Mac的话需下载posix版本</p><p>下载好的文件解压在自己喜欢的地方就可以了</p><h2 id="0-2-环境变量配置"><a href="#0-2-环境变量配置" class="headerlink" title="0.2 环境变量配置"></a>0.2 环境变量配置</h2><p>为了使用编译器，我们需要将编译器的路径告知计算机，也就是设置系统环境变量，将刚才解压好的文件里的bin目录路径复制下来，添加Path中(系统环境变量)</p><p><img src="/img/blog_img/CPP000/2.png" alt="2"></p><h2 id="0-3-检测是否安装成功"><a href="#0-3-检测是否安装成功" class="headerlink" title="0.3 检测是否安装成功"></a>0.3 检测是否安装成功</h2><p>打开cmd输入gcc -v若出现以下信息则表示安装成功</p><p><img src="/img/blog_img/CPP000/3.png" alt="3"></p><h2 id="0-4-Visual-Studio-Code的使用"><a href="#0-4-Visual-Studio-Code的使用" class="headerlink" title="0.4 Visual Studio Code的使用"></a>0.4 Visual Studio Code的使用</h2><p>自行下载VIsual Studio Code安装包(官网一搜就有)，调教成自己喜欢的样子，笔者的如下</p><p>![4.]&#x2F;img&#x2F;blog_img&#x2F;CPP000&#x2F;4.png)</p><p>左侧sidebar选择扩展,搜索C++安装<img src="/img/blog_img/CPP000/5.png" alt="5"></p><p>在自己喜欢的位置建立一个文件夹，进入powershell，cd进这个文件夹,键入以下指令</p><p>通过vscode打开这个文件夹，并信任此文件夹下所有作者</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">code .<br></code></pre></td></tr></table></figure><p>新建文件命名为source.cpp，写一个helloworld</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello,World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击运行-&gt;启动调试，或直接按F5，选择编译方式g++，看到输出HelloWorld调试成功</p><p>在第一次调试之后，会在项目文件夹下新建.vscode文件夹，里边保存了项目的配置，可以手动修改，当需要变更工作目录时，可以移动.vscode文件复制环境，非常方便。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于如何用MinGW和Visual Studio Code来编写和调试还有很多内容可以讲，由于笔者学艺不精，目前无法很好的陈述这一内容，等到有所长进后再来完善。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP001:头文件</title>
    <link href="/2023/01/18/CPP001-%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2023/01/18/CPP001-%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-头文件的作用"><a href="#1-1-头文件的作用" class="headerlink" title="1.1 头文件的作用"></a>1.1 头文件的作用</h2><p>头文件通常用来存储函数的定义，以便其他源文件访问而无需四处粘贴函数的完整内容。头文件以.h结尾</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Log.h </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Log</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message)</span></span>;<span class="hljs-comment">//头文件中存储函数定义</span><br></code></pre></td></tr></table></figure><p>当需要在其他文件中使用Log函数时，用include预处理指令,使用&lt;&gt;来包含标准库头文件</p><p>使用””来包含自定义头文件(优先从项目目录搜索)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Log.h&quot;</span></span><br><span class="hljs-comment">/*...some other code...*/</span><br></code></pre></td></tr></table></figure><p>由于头文件经常互相包含，很有可能出现在<strong>一个翻译单元</strong>重复包含的情况，可以使用批处理语句来解决这类问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-comment">//...some other definition...</span><br></code></pre></td></tr></table></figure><p>还可以使用另一种风格的保护修饰符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _SOME_H <span class="hljs-comment">//判断是否定义了_SOME_H</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _SOME_H <span class="hljs-comment">//若没有定义(没有包含此头文件)，定义_SOME_H</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 114514</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">//结束</span></span><br></code></pre></td></tr></table></figure><p>大多数编译器(gcc, clang等)都支持pragma once,因尽量使用pragma once</p>]]></content>
    
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2023/01/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/01/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客。再写这篇博客之前，我思忖良久:这篇博客究竟是为什么而写，又为谁而写？<br>苦苦思索的我在床上辗转反侧，无数个问题从我心底涌现。几分钟后，hexo配置完成，我的头脑风暴也随之结束。回想起了高中第一次决定走上学术的道路，义无反顾地选择了天坑专业。再回看自己现在的颓废摸样，于是我决定在我尚可说是精力充沛的二十几岁，把我奋斗的每一步脚印踏实的印在这片精神田园上。希望待我垂垂老矣，子孙满堂，正值为刚刚步入社会的年轻人提供经验的古稀之年时，能为社会贡献出这样一份记录着我全部奋斗的历史，能为后来人留下一份宝贵的精神财富，共勉!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
